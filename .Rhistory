filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# Plot COP data to examine for nonstationarity
sway.path <- left_join(cop.x.data, cop.y.data)
View(sway.path)
subject.vec <- ungroup(cop.x.data) %>%
distinct(Participant) %>%
select(Participant) %>%
collect %>%
.[["Participant"]]
cop.x.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 4,
startRow = 2, colNames = TRUE)
head(cop.x.data)
tail(cop.x.data)
cop.y.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 5,
startRow = 2, colNames = TRUE)
head(cop.y.data)
tail(cop.y.data)
#### Reshape data ####
# For easier MSE analysis in Python, COP data need to be in rows not columns. I
# also need to drop the NA columns. To accomplish this, I'll gather into two
# columns (names, values), drop the NA rows, and the spread the values.
cop.x.data <- cop.x.data %>%
gather(Participant, COP.X) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# COP_Y data contained an extraneous row at the bottom.
cop.y.data <- cop.y.data[1:9000,]
cop.y.data <- cop.y.data %>%
gather(Participant, COP.Y) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# Plot COP data to examine for nonstationarity
sway.path <- left_join(cop.x.data, cop.y.data)
subject.vec <- cop.x.data %>%
ungroup(cop.x.data) %>%
distinct(Participant) %>%
select(Participant) %>%
collect %>%
.[["Participant"]]
subject.vec <- cop.x.data %>%
ungroup() %>%
distinct(Participant) %>%
select(Participant) %>%
collect %>%
.[["Participant"]]
View(sway.path)
#### Load libraries ####
library(tidyverse)
library(openxlsx)
#### Read data ####
cop.x.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 4,
startRow = 2, colNames = TRUE)
head(cop.x.data)
tail(cop.x.data)
cop.y.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 5,
startRow = 2, colNames = TRUE)
head(cop.y.data)
tail(cop.y.data)
#### Reshape data ####
# For easier MSE analysis in Python, COP data need to be in rows not columns. I
# also need to drop the NA columns. To accomplish this, I'll gather into two
# columns (names, values), drop the NA rows, and the spread the values.
cop.x.data <- cop.x.data %>%
gather(Participant, COP.X) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# COP_Y data contained an extraneous row at the bottom.
cop.y.data <- cop.y.data[1:9000,]
cop.y.data <- cop.y.data %>%
gather(Participant, COP.Y) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# Prep data frames for plots to examine for nonstationarity
sway.path <- left_join(cop.x.data, cop.y.data)
subject.vec <- cop.x.data %>%
ungroup() %>%
distinct(Participant) %>%
select(Participant) %>%
collect %>%
.[["Participant"]]
# Spread COP data frames
cop.x.data <- ungroup(cop.x.data) %>%
spread(data.point, COP.X)
cop.y.data <-  ungroup(cop.y.data) %>%
spread(data.point, COP.Y)
# Drop Participant column but store to object
cop.x.data <- select(cop.x.data, -Participant)
cop.y.data <- select(cop.y.data, -Participant)
#### Write data for Python ####
write.csv(cop.x.data, file = "./Data Files/COP X.csv", sep = ",", col.names = TRUE, row.names = FALSE)
write.csv(cop.y.data, file = "./Data Files/COP Y.csv", sep = ",", col.names = TRUE, row.names = FALSE)
#### Plot COP trace per partcipant ####
# Create list for plot capture
plot_list = list()
# Make plots
for (i in 1:length(subject.vec)) {
tmp <- filter(swap.path, Participant == subject.vec[i]) %>%
select(-Participant)
p <- ggplot(data = tmp, aes(x = COP.X, y = COP.Y)) +
geom_line() +
ggtitle(paste("Participant: ", subject.vec[i])) +
theme_bw()
plot_list[[i]] <- p
}
# Write plots to Plots folder
my.dir <- getwd()
setwd("Plots")
pdf("Sway Validation.pdf")
for (i in 1:length(subject.vec)){
print(plot_list[[i]])
}
dev.off
# Reset working directory
setwd(my.dir)
# Create list for plot capture
plot_list = list()
# Make plots
for (i in 1:length(subject.vec)) {
tmp <- filter(sway.path, Participant == subject.vec[i]) %>%
select(-Participant)
p <- ggplot(data = tmp, aes(x = COP.X, y = COP.Y)) +
geom_line() +
ggtitle(paste("Participant: ", subject.vec[i])) +
theme_bw()
plot_list[[i]] <- p
}
my.dir <- getwd()
setwd("Plots")
pdf("Sway Validation.pdf")
for (i in 1:length(subject.vec)){
print(plot_list[[i]])
}
dev.off
dev.off()
setwd(my.dir)
source('~/GitHub/COP Data/R Scripts/Data Processing.R')
source('~/GitHub/COP Data/R Scripts/Data Processing.R')
#### Read data ####
cop.x.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 4,
startRow = 2, colNames = TRUE)
head(cop.x.data)
tail(cop.x.data)
cop.y.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 5,
startRow = 2, colNames = TRUE)
head(cop.y.data)
tail(cop.y.data)
#### Reshape data ####
# For easier MSE analysis in Python, COP data need to be in rows not columns. I
# also need to drop the NA columns. To accomplish this, I'll gather into two
# columns (names, values), drop the NA rows, and the spread the values.
cop.x.data <- cop.x.data %>%
gather(Participant, COP.X) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# COP_Y data contained an extraneous row at the bottom.
cop.y.data <- cop.y.data[1:9000,]
cop.y.data <- cop.y.data %>%
gather(Participant, COP.Y) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# Prep data frames for plots to examine for nonstationarity
sway.path <- left_join(cop.x.data, cop.y.data) %>%
ungroup()
subject.vec <- cop.x.data %>%
ungroup() %>%
distinct(Participant) %>%
select(Participant) %>%
collect %>%
.[["Participant"]]
# Spread COP data frames
cop.x.data <- ungroup(cop.x.data) %>%
spread(data.point, COP.X)
cop.y.data <-  ungroup(cop.y.data) %>%
spread(data.point, COP.Y)
# Drop Participant column but store to object
cop.x.data <- select(cop.x.data, -Participant)
cop.y.data <- select(cop.y.data, -Participant)
#### Write data for Python ####
write.csv(cop.x.data, file = "./Data Files/COP X.csv", sep = ",", col.names = TRUE, row.names = FALSE)
write.csv(cop.y.data, file = "./Data Files/COP Y.csv", sep = ",", col.names = TRUE, row.names = FALSE)
#### Plot COP trace per partcipant ####
# Create list for plot capture
plot_list = list()
# Make plots
for (i in 1:length(subject.vec)) {
tmp <- filter(sway.path, Participant == subject.vec[i]) %>%
select(-Participant)
p <- ggplot(data = tmp, aes(x = COP.X, y = COP.Y)) +
geom_point() +
ggtitle(paste("Participant: ", subject.vec[i])) +
theme_bw()
plot_list[[i]] <- p
}
plot_list[[1]]
# Write plots to Plots folder
my.dir <- getwd()
setwd("Plots")
pdf("Sway Validation.pdf")
for (i in 1:length(subject.vec)){
print(plot_list[[i]])
}
dev.off()
# Reset working directory
setwd(my.dir)
#### Clean workspace ####
rm(list = c("cop.x.data", "cop.y.data", "my.dir", "plot_list", "p", "tmp", "i",
"sway.path"))
mse.x <- read.csv("Data Files/MSE X.csv")
View(mse.x)
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
View(mse.x)
library(tidyverse)
library(nlme)
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mse.x <- mutate(mse.x, Participant = subject.vec)
View(mse.x)
mse.x <- mse.x %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.x$Scale <- as.numeric(gsub("V","", mse.x$Scale))
str(mse.x)
View(mse.x)
#### Load MSE data ####
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mxe.y <- read.csv("Data Files/MXE Y.csv", header = FALSE)
mxe.x.detrended <- read.csv("Data Files/Detrended X MSE.csv", header = FALSE)
mse.y.detrended <- read.csv("Data Files/Detrended Y MSE.csv", header = FALSE)
#### Add subject indicators to each data frame
mse.x <- mutate(mse.x, Participant = subject.vec)
mse.y <- mutate(mse.y, Participant = subject.vec)
mse.x.detrended <- mutate(mse.x.detrended, Participant = subject.vec)
mse.y.detrended <- mutate(mse.y.detrended, Participant = subject.vec)
#### Reshape to long and reformat the scale value column
mse.x <- mse.x %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.x$Scale <- as.numeric(gsub("V","", mse.x$Scale))
mse.x.detrended <- mse.x.detrended %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.x.detrended$Scale <- as.numeric(gsub("V","", mse.x.detrended$Scale))
mse.y <- mse.y %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.y$Scale <- as.numeric(gsub("V","", mse.y$Scale))
mse.y.detrended <- mse.y.detrended %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.y.detrended$Scale <- as.numeric(gsub("V","", mse.y.detrended$Scale))
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mxe.y <- read.csv("Data Files/MXE Y.csv", header = FALSE)
mxe.y <- read.csv("Data Files/MSE Y.csv", header = FALSE)
mxe.x.detrended <- read.csv("Data Files/Detrended X MSE.csv", header = FALSE)
mse.y.detrended <- read.csv("Data Files/Detrended Y MSE.csv", header = FALSE)
mse.x <- mutate(mse.x, Participant = subject.vec)
mse.y <- mutate(mse.y, Participant = subject.vec)
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mse.y <- read.csv("Data Files/MSE Y.csv", header = FALSE)
mse.x.detrended <- read.csv("Data Files/Detrended X MSE.csv", header = FALSE)
mse.y.detrended <- read.csv("Data Files/Detrended Y MSE.csv", header = FALSE)
#### Add subject indicators to each data frame
mse.x <- mutate(mse.x, Participant = subject.vec)
mse.y <- mutate(mse.y, Participant = subject.vec)
mse.x.detrended <- mutate(mse.x.detrended, Participant = subject.vec)
mse.y.detrended <- mutate(mse.y.detrended, Participant = subject.vec)
#### Load libraries ####
library(tidyverse)
library(openxlsx)
#### Read data ####
cop.x.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 4,
startRow = 2, colNames = TRUE)
head(cop.x.data)
tail(cop.x.data)
cop.y.data <- read.xlsx("./Data Files/Dual task analysis_Devin2.xlsx", sheet = 5,
startRow = 2, colNames = TRUE)
head(cop.y.data)
tail(cop.y.data)
#### Reshape data ####
# For easier MSE analysis in Python, COP data need to be in rows not columns. I
# also need to drop the NA columns. To accomplish this, I'll gather into two
# columns (names, values), drop the NA rows, and the spread the values.
cop.x.data <- cop.x.data %>%
gather(Participant, COP.X) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# COP_Y data contained an extraneous row at the bottom.
cop.y.data <- cop.y.data[1:9000,]
cop.y.data <- cop.y.data %>%
gather(Participant, COP.Y) %>%
filter(complete.cases(.)) %>%
group_by(Participant) %>%
mutate(data.point = seq(1:n()))
# Prep data frames for plots to examine for nonstationarity
sway.path <- left_join(cop.x.data, cop.y.data) %>%
ungroup()
subject.vec <- cop.x.data %>%
ungroup() %>%
distinct(Participant) %>%
select(Participant) %>%
collect %>%
.[["Participant"]]
rm(list = c("cop.x.data", "cop.y.data", "my.dir", "plot_list", "p", "tmp", "i",
"sway.path"))
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mse.y <- read.csv("Data Files/MSE Y.csv", header = FALSE)
mse.x.detrended <- read.csv("Data Files/Detrended X MSE.csv", header = FALSE)
mse.y.detrended <- read.csv("Data Files/Detrended Y MSE.csv", header = FALSE)
#### Add subject indicators to each data frame
mse.x <- mutate(mse.x, Participant = subject.vec)
mse.y <- mutate(mse.y, Participant = subject.vec)
mse.x.detrended <- mutate(mse.x.detrended, Participant = subject.vec)
mse.y.detrended <- mutate(mse.y.detrended, Participant = subject.vec)
mse.x <- mse.x %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.x$Scale <- as.numeric(gsub("V","", mse.x$Scale))
mse.x.detrended <- mse.x.detrended %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.x.detrended$Scale <- as.numeric(gsub("V","", mse.x.detrended$Scale))
mse.y <- mse.y %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.y$Scale <- as.numeric(gsub("V","", mse.y$Scale))
mse.y.detrended <- mse.y.detrended %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.y.detrended$Scale <- as.numeric(gsub("V","", mse.y.detrended$Scale))
#### Load MSE data ####
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mse.y <- read.csv("Data Files/MSE Y.csv", header = FALSE)
mse.x.detrended <- read.csv("Data Files/Detrended X MSE.csv", header = FALSE)
mse.y.detrended <- read.csv("Data Files/Detrended Y MSE.csv", header = FALSE)
#### Add subject indicators to each data frame
mse.x <- mutate(mse.x, Participant = subject.vec)
mse.y <- mutate(mse.y, Participant = subject.vec)
mse.x.detrended <- mutate(mse.x.detrended, Participant = subject.vec)
mse.y.detrended <- mutate(mse.y.detrended, Participant = subject.vec)
#### Reshape to long and reformat the scale value column
mse.x <- mse.x %>%
select(-V1) %>%
gather(Scale, ml.mse, -Participant)
mse.x$Scale <- as.numeric(gsub("V","", mse.x$Scale))
mse.x.detrended <- mse.x.detrended %>%
select(-V1) %>%
gather(Scale, ml.detrended.mse, -Participant)
mse.x.detrended$Scale <- as.numeric(gsub("V","", mse.x.detrended$Scale))
mse.y <- mse.y %>%
select(-V1) %>%
gather(Scale, ap.mse, -Participant)
mse.y$Scale <- as.numeric(gsub("V","", mse.y$Scale))
mse.y.detrended <- mse.y.detrended %>%
select(-V1) %>%
gather(Scale, ap.detrended.mse, -Participant)
mse.y.detrended$Scale <- as.numeric(gsub("V","", mse.y.detrended$Scale))
mse.data <- inner_join(mse.x, mse.x.detrended)
mse.data <- inner_join(mse.data, mse.y)
mse.data <- inner_join(mse.data, mse.y.detrended)
View(mse.data)
mse.data <- separate(mse.data, Participant)
mse.data <- separate(mse.data, Participant, into = c("Participant", "Environment", "Task"))
mse.data <- extract(mse.data, Participant, into = c("Participant", "Environment", "Task"),
'(.*)(.*))
)
mse.data <- extract(mse.data, Participant, into = c("Participant", "Environment", "Task"),
'(.*)(.*))')
View(mse.data)
mse.data <- inner_join(mse.x, mse.x.detrended)
mse.data <- inner_join(mse.data, mse.y)
mse.data <- inner_join(mse.data, mse.y.detrended)
#### Split participant column ####
mse.data <- extract(mse.data, Participant, into = c("Participant", "Task"),
'[^0-9]')
mse.data <- extract(mse.data, Participant, into = c("Participant", "Environment", "Task"),
'(\d\d)(^\d)(^\d)')
mse.data <- extract(mse.data, Participant, into = c("Participant", "Environment", "Task"),
'([0-9][0-9])(^[0-9])(^[0-9])')
View(mse.data)
mse.data <- inner_join(mse.x, mse.x.detrended)
mse.data <- inner_join(mse.data, mse.y)
mse.data <- inner_join(mse.data, mse.y.detrended)
#### Split participant column ####
mse.data <- extract(mse.data, Participant, into = c("Participant", "Environment", "Task"),
'([0-9][0-9])(^[0-9])(^[0-9])')
View(mse.data)
mse.data <- inner_join(mse.x, mse.x.detrended)
mse.data <- inner_join(mse.data, mse.y)
mse.data <- inner_join(mse.data, mse.y.detrended)
#### Split participant column ####
mse.data <- extract(mse.data, Participant, into = c("Subject", "Environment", "Task"),
'([[0-9]][[0-9]])(^[[0-9]])(^[[0-9]])')
View(mse.data)
mse.data <- inner_join(mse.x, mse.x.detrended)
mse.data <- inner_join(mse.data, mse.y)
mse.data <- inner_join(mse.data, mse.y.detrended)
View(mse.data)
mse.data <- extract(mse.data, Participant, into = c("Subject", "Environment", "Task"),
'([[0-9]][[0-9]]+)(^[[0-9]]+)(^[[0-9]]+)')
View(mse.data)
mse.data <- inner_join(mse.x, mse.x.detrended)
mse.data <- inner_join(mse.data, mse.y)
mse.data <- inner_join(mse.data, mse.y.detrended)
mse.data <- extract(mse.data, Participant, into = c("Subject", "Environment", "Task"),
"([0-2][0-9])([L|W])([S|D])")
View(mse.data)
View(mse.data)
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = Task)) +
facet_grid(Type ~ Environment) +
geom_line()
#### Load libraries ####
library(tidyverse)
library(nlme)
#### Load MSE data ####
mse.x <- read.csv("Data Files/MSE X.csv", header = FALSE)
mse.y <- read.csv("Data Files/MSE Y.csv", header = FALSE)
mse.x.detrended <- read.csv("Data Files/Detrended X MSE.csv", header = FALSE)
mse.y.detrended <- read.csv("Data Files/Detrended Y MSE.csv", header = FALSE)
#### Add subject indicators to each data frame
mse.x <- mutate(mse.x, Participant = subject.vec)
mse.y <- mutate(mse.y, Participant = subject.vec)
mse.x.detrended <- mutate(mse.x.detrended, Participant = subject.vec)
mse.y.detrended <- mutate(mse.y.detrended, Participant = subject.vec)
#### Reshape to long and reformat the scale value column
mse.x <- mse.x %>%
select(-V1) %>%
gather(Scale, MSE, -Participant) %>%
mutate(Direction = "Medial-Lateral",
Type = "Raw")
mse.x$Scale <- as.numeric(gsub("V","", mse.x$Scale))
mse.x.detrended <- mse.x.detrended %>%
select(-V1) %>%
gather(Scale, MSE, -Participant) %>%
mutate(Direction = "Medial-Lateral",
Type = "Detrended")
mse.x.detrended$Scale <- as.numeric(gsub("V","", mse.x.detrended$Scale))
mse.y <- mse.y %>%
select(-V1) %>%
gather(Scale, MSE, -Participant) %>%
mutate(Direction = "Anterior-Posterior",
Type = "Raw")
mse.y$Scale <- as.numeric(gsub("V","", mse.y$Scale))
mse.y.detrended <- mse.y.detrended %>%
select(-V1) %>%
gather(Scale, MSE, -Participant) %>%
mutate(Direction = "Anterior-Posterior",
Type = "Detrended")
mse.y.detrended$Scale <- as.numeric(gsub("V","", mse.y.detrended$Scale))
#### Join data frames in long format ####
mse.data <- bind_rows(list(mse.x, mse.x.detrended, mse.y, mse.y.detrended))
#### Split participant column ####
mse.data <- extract(mse.data, Participant, into = c("Subject", "Environment", "Task"),
"([0-2][0-9])([L|W])([S|D])")
str(mse.data)
mse.data <- mutate_at(mse.data, vars(Subject), funs(as.numeric))
#### Split into ML and AP directions ####
ap.mse <- filter(mse.data, Direction = "Anterior-Posterior")
ml.mse <- filter(mse.data, Direction = "Medial-Lateral")
#### Plot 2x2 frames for each direction ####
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = Task)) +
facet_grid(Type ~ Environment) +
geom_line()
ap.mse <- filter(mse.data, Direction == "Anterior-Posterior")
ml.mse <- filter(mse.data, Direction == "Medial-Lateral")
#### Plot 2x2 frames for each direction ####
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = Task)) +
facet_grid(Type ~ Environment) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, group = Subject, color = Task)) +
facet_grid(Type ~ Environment) +
geom_line()
View(ap.mse)
ggplot(data = ap.mse, aes(x = Scale, y = MSE, group = Subject, color = Task)) +
facet_grid(Type ~ Environment) +
geom_point()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, group = Task, color = Subject)) +
facet_grid(Type ~ Environment) +
geom_point()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, group = Task, color = Subject)) +
facet_grid(Type ~ Environment) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = Subject)) +
facet_grid(Type ~ Environment*Task) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = as.factor(Subject))) +
facet_grid(Type ~ Environment*Task) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, group = Task, color = as.factor(Subject))) +
facet_grid(Type ~ Environment) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = as.factor(Subject))) +
facet_grid(Type ~ Environment*Task) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, color = as.factor(Subject))) +
facet_grid(Type*Task ~ Environment) +
geom_line()
ggplot(data = ap.mse, aes(x = Scale, y = MSE, group = interaction(Task, Subject),
color = Task)) +
facet_grid(Type ~ Environment) +
geom_line()
ggplot(data = ml.mse, aes(x = Scale, y = MSE, group = interaction(Task, Subject),
color = Task)) +
facet_grid(Type ~ Environment) +
geom_line()
