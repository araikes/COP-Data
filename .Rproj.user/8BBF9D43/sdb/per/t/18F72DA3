{
    "contents" : "#### COP Data Analysis ####\n# This is a collaborative project between Dr. Eadric Bressel, Adam Raikes, Talin\n# Louder, and Devin Patterson. In this arm of the analysis, I will analyze the\n# raw X and Y COP data to examine the multiscale complexity of single and dual\n# task postural sway on land and water.\n\n# The data was provided to me as a .xlsx file with 4 tabs. Tabs 4 and 5 are the\n# COPx and Y. However, these are untidy data with blank columns to separate\n# conditions. Prior to computing multiscale entropy, this dataset requires\n# substantial cleaning.\n\n#### Load libraries ####\nlibrary(tidyverse)\nlibrary(openxlsx)\n\n#### Read data ####\ncop.x.data <- read.xlsx(\"./Data Files/Dual task analysis_Devin2.xlsx\", sheet = 4,\n                        startRow = 2, colNames = TRUE)\nhead(cop.x.data)\ntail(cop.x.data)\n\ncop.y.data <- read.xlsx(\"./Data Files/Dual task analysis_Devin2.xlsx\", sheet = 5,\n                        startRow = 2, colNames = TRUE)\nhead(cop.y.data)\ntail(cop.y.data)\n\n#### Reshape data ####\n# For easier MSE analysis in Python, COP data need to be in rows not columns. I\n# also need to drop the NA columns. To accomplish this, I'll gather into two\n# columns (names, values), drop the NA rows, and the spread the values.\ncop.x.data <- cop.x.data %>%\n  gather(Participant, COP.X) %>%\n  filter(complete.cases(.)) %>%\n  group_by(Participant) %>%\n  mutate(data.point = seq(1:n()))\n\n# COP_Y data contained an extraneous row at the bottom.\ncop.y.data <- cop.y.data[1:9000,]\ncop.y.data <- cop.y.data %>%\n  gather(Participant, COP.Y) %>%\n  filter(complete.cases(.)) %>%\n  group_by(Participant) %>%\n  mutate(data.point = seq(1:n()))\n  \n# Prep data frames for plots to examine for nonstationarity\nsway.path <- left_join(cop.x.data, cop.y.data) %>%\n  ungroup()\n\nsubject.vec <- cop.x.data %>%\n  ungroup() %>%\n  distinct(Participant) %>%\n  select(Participant) %>%\n  collect %>%\n  .[[\"Participant\"]]\n\n# Spread COP data frames\ncop.x.data <- ungroup(cop.x.data) %>%\n  spread(data.point, COP.X)\n\ncop.y.data <-  ungroup(cop.y.data) %>%\n  spread(data.point, COP.Y)\n\n# Drop Participant column but store to object\ncop.x.data <- select(cop.x.data, -Participant)\ncop.y.data <- select(cop.y.data, -Participant)\n\n#### Write data for Python ####\nwrite.csv(cop.x.data, file = \"./Data Files/COP X.csv\", sep = \",\", col.names = TRUE, row.names = FALSE)\nwrite.csv(cop.y.data, file = \"./Data Files/COP Y.csv\", sep = \",\", col.names = TRUE, row.names = FALSE)\n\n#### Plot COP trace per partcipant ####\n\n# Create list for plot capture\nplot_list = list()\n\n# Make plots\nfor (i in 1:length(subject.vec)) {\n  tmp <- filter(sway.path, Participant == subject.vec[i]) %>%\n    select(-Participant)\n  \n  p <- ggplot(data = tmp, aes(x = COP.X, y = COP.Y)) +\n    geom_point() +\n    ggtitle(paste(\"Participant: \", subject.vec[i])) +\n    theme_bw()\n  \n  plot_list[[i]] <- p\n}\n\n# Write plots to Plots folder\nmy.dir <- getwd()\n\nsetwd(\"Plots\")\n\npdf(\"Sway Validation.pdf\")\nfor (i in 1:length(subject.vec)){\n  print(plot_list[[i]])\n}\n\ndev.off()\n\n# Reset working directory\nsetwd(my.dir)\n\n#### Clean workspace ####\nrm(list = c(\"cop.x.data\", \"cop.y.data\", \"my.dir\", \"plot_list\", \"p\", \"tmp\", \"i\",\n            \"sway.path\"))\n          ",
    "created" : 1477952361002.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "417077132",
    "id" : "18F72DA3",
    "lastKnownWriteTime" : 1477952252,
    "path" : "~/GitHub/COP-Data/R Scripts/Data Processing.R",
    "project_path" : "R Scripts/Data Processing.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "type" : "r_source"
}